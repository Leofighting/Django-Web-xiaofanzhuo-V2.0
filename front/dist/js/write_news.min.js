function News(){}News.prototype.listenUploadFileEvent=function(){var n=$("#thumbnail-btn");n.change(function(){var e=n[0].files[0],t=new FormData;t.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:t,processData:!1,contentType:!1,success:function(e){if(200===e.code){var t=e.data.url;$("#thumbnail-form").val(t)}}})})},News.prototype.listenQiniuFileEvent=function(){var r=this;$("#thumbnail-btn").change(function(){var a=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var t=e.data.token,n=(new Date).getTime()+"."+a.name.split(".")[-1],o={fname:n,params:{},mimeType:["image/png","image/jpeg","image/gif"]},i={useCdnDomain:!0,retryCount:6,region:qiniu.region.z0};qiniu.upload(a,n,t,o,i).subscribe({next:r.handleFileUploadProgress,error:r.handleFileUploadError,complete:r.handleFileUploadComplete})}}})})},News.prototype.handleFileUploadProgress=function(e){var t=e.total.percent;News.progressGroup.show();var n=$(".progress-bar");n.css({width:t.toFixed(0)+"%"}),n.text(t.toFixed(0)+"%")},News.prototype.handleFileUploadError=function(e){window.messageBox.showError(e.message),$("#progress-group").hide(),console.log(e.message)},News.prototype.handleFileUploadComplete=function(e){console.log(e),$("#progress-group").hide();var t="http://7xqenu.com1.z0.glb.clouddn.com/"+e.key;$("input[name='thumbnail']").val(t)},News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{initialFrameHeight:500,serverUrl:"/ueditor/upload/"})},News.prototype.listenSubmitEvent=function(){$("#submit-btn").click(function(e){e.preventDefault();var t=$(this).attr("data-news-id"),n=$("input[name='title']").val(),o=$("select[name='category']").val(),i=$("input[name='desc']").val(),a=$("input[name='thumbnail']").val(),r=window.ue.getContent(),s="";s=t?"/cms/edit_news/":"/cms/write_news/",xfzajax.post({url:s,data:{title:n,category:o,desc:i,thumbnail:a,content:r,pk:t},success:function(e){200===e.code&&xfzalert.alertSuccess("新闻发表成功~",function(){window.location.reload()})}})})},News.prototype.run=function(){var e=this;e.listenUploadFileEvent(),e.initUEditor(),e.listenSubmitEvent()},$(function(){(new News).run(),News.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
